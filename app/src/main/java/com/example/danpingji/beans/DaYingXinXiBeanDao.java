package com.example.danpingji.beans;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DA_YING_XIN_XI_BEAN".
*/
public class DaYingXinXiBeanDao extends AbstractDao<DaYingXinXiBean, Long> {

    public static final String TABLENAME = "DA_YING_XIN_XI_BEAN";

    /**
     * Properties of entity DaYingXinXiBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property AccountId = new Property(1, int.class, "accountId", false, "ACCOUNT_ID");
        public final static Property AccountName = new Property(2, String.class, "accountName", false, "ACCOUNT_NAME");
        public final static Property CardNumber = new Property(3, String.class, "cardNumber", false, "CARD_NUMBER");
        public final static Property CardPhoto = new Property(4, String.class, "cardPhoto", false, "CARD_PHOTO");
        public final static Property CountType = new Property(5, int.class, "countType", false, "COUNT_TYPE");
        public final static Property DtoResult = new Property(6, int.class, "dtoResult", false, "DTO_RESULT");
        public final static Property Gender = new Property(7, int.class, "gender", false, "GENDER");
        public final static Property IdX = new Property(8, int.class, "idX", false, "ID_X");
        public final static Property Level = new Property(9, String.class, "level", false, "LEVEL");
        public final static Property ModifyTime = new Property(10, long.class, "modifyTime", false, "MODIFY_TIME");
        public final static Property Name = new Property(11, String.class, "name", false, "NAME");
        public final static Property Organ = new Property(12, String.class, "organ", false, "ORGAN");
        public final static Property PageNum = new Property(13, int.class, "pageNum", false, "PAGE_NUM");
        public final static Property PageSize = new Property(14, int.class, "pageSize", false, "PAGE_SIZE");
        public final static Property Phone = new Property(15, String.class, "phone", false, "PHONE");
        public final static Property Reason = new Property(16, String.class, "reason", false, "REASON");
        public final static Property ScanPhoto = new Property(17, String.class, "scanPhoto", false, "SCAN_PHOTO");
        public final static Property Score = new Property(18, int.class, "score", false, "SCORE");
        public final static Property Sid = new Property(19, int.class, "sid", false, "SID");
        public final static Property Source = new Property(20, String.class, "source", false, "SOURCE");
        public final static Property Status = new Property(21, int.class, "status", false, "STATUS");
        public final static Property VisitDate = new Property(22, long.class, "visitDate", false, "VISIT_DATE");
        public final static Property VisitDepartment = new Property(23, String.class, "visitDepartment", false, "VISIT_DEPARTMENT");
        public final static Property VisitIncident = new Property(24, String.class, "visitIncident", false, "VISIT_INCIDENT");
        public final static Property VisitPerson = new Property(25, String.class, "visitPerson", false, "VISIT_PERSON");
        public final static Property Biduijieguo = new Property(26, String.class, "biduijieguo", false, "BIDUIJIEGUO");
        public final static Property YuyueID = new Property(27, String.class, "yuyueID", false, "YUYUE_ID");
    }


    public DaYingXinXiBeanDao(DaoConfig config) {
        super(config);
    }
    
    public DaYingXinXiBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DA_YING_XIN_XI_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"ACCOUNT_ID\" INTEGER NOT NULL ," + // 1: accountId
                "\"ACCOUNT_NAME\" TEXT," + // 2: accountName
                "\"CARD_NUMBER\" TEXT," + // 3: cardNumber
                "\"CARD_PHOTO\" TEXT," + // 4: cardPhoto
                "\"COUNT_TYPE\" INTEGER NOT NULL ," + // 5: countType
                "\"DTO_RESULT\" INTEGER NOT NULL ," + // 6: dtoResult
                "\"GENDER\" INTEGER NOT NULL ," + // 7: gender
                "\"ID_X\" INTEGER NOT NULL ," + // 8: idX
                "\"LEVEL\" TEXT," + // 9: level
                "\"MODIFY_TIME\" INTEGER NOT NULL ," + // 10: modifyTime
                "\"NAME\" TEXT," + // 11: name
                "\"ORGAN\" TEXT," + // 12: organ
                "\"PAGE_NUM\" INTEGER NOT NULL ," + // 13: pageNum
                "\"PAGE_SIZE\" INTEGER NOT NULL ," + // 14: pageSize
                "\"PHONE\" TEXT," + // 15: phone
                "\"REASON\" TEXT," + // 16: reason
                "\"SCAN_PHOTO\" TEXT," + // 17: scanPhoto
                "\"SCORE\" INTEGER NOT NULL ," + // 18: score
                "\"SID\" INTEGER NOT NULL ," + // 19: sid
                "\"SOURCE\" TEXT," + // 20: source
                "\"STATUS\" INTEGER NOT NULL ," + // 21: status
                "\"VISIT_DATE\" INTEGER NOT NULL ," + // 22: visitDate
                "\"VISIT_DEPARTMENT\" TEXT," + // 23: visitDepartment
                "\"VISIT_INCIDENT\" TEXT," + // 24: visitIncident
                "\"VISIT_PERSON\" TEXT," + // 25: visitPerson
                "\"BIDUIJIEGUO\" TEXT," + // 26: biduijieguo
                "\"YUYUE_ID\" TEXT);"); // 27: yuyueID
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DA_YING_XIN_XI_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DaYingXinXiBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getAccountId());
 
        String accountName = entity.getAccountName();
        if (accountName != null) {
            stmt.bindString(3, accountName);
        }
 
        String cardNumber = entity.getCardNumber();
        if (cardNumber != null) {
            stmt.bindString(4, cardNumber);
        }
 
        String cardPhoto = entity.getCardPhoto();
        if (cardPhoto != null) {
            stmt.bindString(5, cardPhoto);
        }
        stmt.bindLong(6, entity.getCountType());
        stmt.bindLong(7, entity.getDtoResult());
        stmt.bindLong(8, entity.getGender());
        stmt.bindLong(9, entity.getIdX());
 
        String level = entity.getLevel();
        if (level != null) {
            stmt.bindString(10, level);
        }
        stmt.bindLong(11, entity.getModifyTime());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(12, name);
        }
 
        String organ = entity.getOrgan();
        if (organ != null) {
            stmt.bindString(13, organ);
        }
        stmt.bindLong(14, entity.getPageNum());
        stmt.bindLong(15, entity.getPageSize());
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(16, phone);
        }
 
        String reason = entity.getReason();
        if (reason != null) {
            stmt.bindString(17, reason);
        }
 
        String scanPhoto = entity.getScanPhoto();
        if (scanPhoto != null) {
            stmt.bindString(18, scanPhoto);
        }
        stmt.bindLong(19, entity.getScore());
        stmt.bindLong(20, entity.getSid());
 
        String source = entity.getSource();
        if (source != null) {
            stmt.bindString(21, source);
        }
        stmt.bindLong(22, entity.getStatus());
        stmt.bindLong(23, entity.getVisitDate());
 
        String visitDepartment = entity.getVisitDepartment();
        if (visitDepartment != null) {
            stmt.bindString(24, visitDepartment);
        }
 
        String visitIncident = entity.getVisitIncident();
        if (visitIncident != null) {
            stmt.bindString(25, visitIncident);
        }
 
        String visitPerson = entity.getVisitPerson();
        if (visitPerson != null) {
            stmt.bindString(26, visitPerson);
        }
 
        String biduijieguo = entity.getBiduijieguo();
        if (biduijieguo != null) {
            stmt.bindString(27, biduijieguo);
        }
 
        String yuyueID = entity.getYuyueID();
        if (yuyueID != null) {
            stmt.bindString(28, yuyueID);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DaYingXinXiBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getAccountId());
 
        String accountName = entity.getAccountName();
        if (accountName != null) {
            stmt.bindString(3, accountName);
        }
 
        String cardNumber = entity.getCardNumber();
        if (cardNumber != null) {
            stmt.bindString(4, cardNumber);
        }
 
        String cardPhoto = entity.getCardPhoto();
        if (cardPhoto != null) {
            stmt.bindString(5, cardPhoto);
        }
        stmt.bindLong(6, entity.getCountType());
        stmt.bindLong(7, entity.getDtoResult());
        stmt.bindLong(8, entity.getGender());
        stmt.bindLong(9, entity.getIdX());
 
        String level = entity.getLevel();
        if (level != null) {
            stmt.bindString(10, level);
        }
        stmt.bindLong(11, entity.getModifyTime());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(12, name);
        }
 
        String organ = entity.getOrgan();
        if (organ != null) {
            stmt.bindString(13, organ);
        }
        stmt.bindLong(14, entity.getPageNum());
        stmt.bindLong(15, entity.getPageSize());
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(16, phone);
        }
 
        String reason = entity.getReason();
        if (reason != null) {
            stmt.bindString(17, reason);
        }
 
        String scanPhoto = entity.getScanPhoto();
        if (scanPhoto != null) {
            stmt.bindString(18, scanPhoto);
        }
        stmt.bindLong(19, entity.getScore());
        stmt.bindLong(20, entity.getSid());
 
        String source = entity.getSource();
        if (source != null) {
            stmt.bindString(21, source);
        }
        stmt.bindLong(22, entity.getStatus());
        stmt.bindLong(23, entity.getVisitDate());
 
        String visitDepartment = entity.getVisitDepartment();
        if (visitDepartment != null) {
            stmt.bindString(24, visitDepartment);
        }
 
        String visitIncident = entity.getVisitIncident();
        if (visitIncident != null) {
            stmt.bindString(25, visitIncident);
        }
 
        String visitPerson = entity.getVisitPerson();
        if (visitPerson != null) {
            stmt.bindString(26, visitPerson);
        }
 
        String biduijieguo = entity.getBiduijieguo();
        if (biduijieguo != null) {
            stmt.bindString(27, biduijieguo);
        }
 
        String yuyueID = entity.getYuyueID();
        if (yuyueID != null) {
            stmt.bindString(28, yuyueID);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public DaYingXinXiBean readEntity(Cursor cursor, int offset) {
        DaYingXinXiBean entity = new DaYingXinXiBean( //
            cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // accountId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // accountName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // cardNumber
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // cardPhoto
            cursor.getInt(offset + 5), // countType
            cursor.getInt(offset + 6), // dtoResult
            cursor.getInt(offset + 7), // gender
            cursor.getInt(offset + 8), // idX
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // level
            cursor.getLong(offset + 10), // modifyTime
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // name
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // organ
            cursor.getInt(offset + 13), // pageNum
            cursor.getInt(offset + 14), // pageSize
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // phone
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // reason
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // scanPhoto
            cursor.getInt(offset + 18), // score
            cursor.getInt(offset + 19), // sid
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // source
            cursor.getInt(offset + 21), // status
            cursor.getLong(offset + 22), // visitDate
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // visitDepartment
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // visitIncident
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // visitPerson
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // biduijieguo
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27) // yuyueID
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DaYingXinXiBean entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setAccountId(cursor.getInt(offset + 1));
        entity.setAccountName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCardNumber(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCardPhoto(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCountType(cursor.getInt(offset + 5));
        entity.setDtoResult(cursor.getInt(offset + 6));
        entity.setGender(cursor.getInt(offset + 7));
        entity.setIdX(cursor.getInt(offset + 8));
        entity.setLevel(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setModifyTime(cursor.getLong(offset + 10));
        entity.setName(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setOrgan(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setPageNum(cursor.getInt(offset + 13));
        entity.setPageSize(cursor.getInt(offset + 14));
        entity.setPhone(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setReason(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setScanPhoto(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setScore(cursor.getInt(offset + 18));
        entity.setSid(cursor.getInt(offset + 19));
        entity.setSource(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setStatus(cursor.getInt(offset + 21));
        entity.setVisitDate(cursor.getLong(offset + 22));
        entity.setVisitDepartment(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setVisitIncident(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setVisitPerson(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setBiduijieguo(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setYuyueID(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DaYingXinXiBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DaYingXinXiBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DaYingXinXiBean entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
